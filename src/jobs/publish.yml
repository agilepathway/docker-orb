description: Build and optionally deploy a Docker image

executor: <<parameters.executor>>

parameters:
  executor:
    type: executor
    default: machine
    description: >
      Executor to use for this job, defaults to this orb's `machine`
      executor

  use-remote-docker:
    type: boolean
    default: false
    description: >
      Setup a remote Docker engine for Docker commands? Only required
      if using a Docker-based executor

  remote-docker-dlc:
    type: boolean
    default: false
    description: >
     Enable docker layer caching if using remote Docker engine.
     Defaults to false.

  dockerfile:
    type: string
    default: Dockerfile
    description: Name of dockerfile to use, defaults to Dockerfile

  path:
    type: string
    default: .
    description: >
      Path to the directory containing your Dockerfile and build context,
      defaults to . (working directory)

  lint-dockerfile:
    type: boolean
    default: false
    description: >
      Lint Dockerfile before building?

  treat-warnings-as-errors:
    type: boolean
    default: false
    description: >
     If linting Dockerfile, treat linting warnings as errors (would trigger
     an exist code and fail the CircleCI job)?

  image:
    type: string
    default: $DEFAULT_IMAGE_NAME
    description: >
      Name of image to build, defaults to the value of
      $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
      (with the branch name appended too if not on master)

  tag:
    type: string
    default: latest,GIT-COMMIT-$CIRCLE_SHA1,CIRCLECI-$CIRCLE_BUILD_NUM
    description: >
      Comma-separated list of image tags, defaults are:
      latest,CIRCLECI-$CIRCLE_BUILD_NUM,GIT-COMMIT-$CIRCLE_SHA1

  tag_after_build:
    type: string
    default: ""
    description: >
      Comma-separated list of image tags to be added after
      the image has been built (e.g. version numbers
      of software installed on the image, which can only be
      known after building the image, not before)

  registry:
    type: string
    default: docker.io
    description: >
      Name of registry to use, defaults to docker.io

  use-docker-credentials-store:
    type: boolean
    default: false
    description: >
      Configure Docker to use a credentials store.
      This option is only supported on Ubuntu/Debian platforms.

  extra_build_args:
    type: string
    default: ""
    description: >
      Extra flags to pass to docker build. For examples, see
      https://docs.docker.com/engine/reference/commandline/build

  cache_from:
    type: string
    default: ""
    description: >
      Comma-separated list of images to pull before build for --cache-from
      https://docs.docker.com/engine/reference/commandline/build/

  after_checkout:
    description: Optional steps to run after checking out the code
    type: steps
    default: []

  before_build:
    description: Optional steps to run before building the Docker image
    type: steps
    default: []

  after_build:
    description: Optional steps to run after building the Docker image
    type: steps
    default: []

  deploy:
    description: Push the image to a registry?
    type: boolean
    default: true

  docker-username:
    type: env_var_name
    default: DOCKER_LOGIN
    description: >
      Name of environment variable storing your Docker username

  docker-password:
    type: env_var_name
    default: DOCKER_PASSWORD
    description: >
      Name of environment variable storing your Docker password

steps:
  - checkout

  - run:
      name: Set default image name
      command: |
        if [ "$CIRCLE_BRANCH" = "master" ]; then
            default_image_name=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
        else
            default_image_name=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BRANCH
        fi
        echo "export DEFAULT_IMAGE_NAME=$default_image_name" >> "$BASH_ENV"
        source "$BASH_ENV"
        echo "DEFAULT_IMAGE_NAME environment variable set: $default_image_name"

  - run:
      name: Export image name
      command: |
        echo "export IMAGE_NAME=<<parameters.image>>" >> "$BASH_ENV"
        source "$BASH_ENV"
        echo "IMAGE_NAME environment variable set: <<parameters.image>>"

  - when:
      name: Run after_checkout lifecycle hook steps
      condition: <<parameters.after_checkout>>
      steps: <<parameters.after_checkout>>

  - when:
      condition: <<parameters.use-remote-docker>>
      steps:
        - setup_remote_docker:
            docker_layer_caching: <<parameters.remote-docker-dlc>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - check:
            registry: <<parameters.registry>>
            docker-username: <<parameters.docker-username>>
            docker-password: <<parameters.docker-password>>
            use-docker-credentials-store: <<parameters.use-docker-credentials-store>>

  - when:
      name: Run before_build lifecycle hook steps
      condition: <<parameters.before_build>>
      steps: <<parameters.before_build>>

  - build:
      dockerfile: <<parameters.dockerfile>>
      path: <<parameters.path>>
      registry: <<parameters.registry>>
      image: <<parameters.image>>
      tag: <<parameters.tag>>
      cache_from: <<parameters.cache_from>>
      extra_build_args: <<parameters.extra_build_args>>
      lint-dockerfile: <<parameters.lint-dockerfile>>
      treat-warnings-as-errors: <<parameters.treat-warnings-as-errors>>

  - when:
      name: Run after_build lifecycle hook steps
      condition: <<parameters.after_build>>
      steps: <<parameters.after_build>>


  - when:
      name: Add tags that can only be added after build
      condition: <<parameters.tag_after_build>>
      steps:
        - tag-after-build:
            tag: <<parameters.tag_after_build>>

  - when:
      condition: <<parameters.deploy>>
      steps:
        - push:
            registry: <<parameters.registry>>
            image: <<parameters.image>>
            tag: <<parameters.tag>>,<<parameters.tag_after_build>>
            digest-path: /tmp/digest.txt
        - store_artifacts:
            path: /tmp/digest.txt
            destination: docker/digest.txt

  - run:
      name: list all the tags
      command: docker images <<parameters.image>> --format="{{ .Tag }}" | tee -a  "/tmp/tags.txt"

  - store_artifacts:
      path: /tmp/tags.txt
      destination: docker/tags.txt
